#include "<inc>/const.h"
#include "<inc>/list.h"

extern Free { ptr -- }
extern Malloc { sz -- ptr }
extern Calloc { sz -- ptr }

(* stolen and ported to dragonfruit from toaruos list.c *)

(* any new fns should be updated in <df>/list.h *)

fn ListLength { list -- length }
	list@ List_Length + @ length!
end

fn ListHead { list -- head }
	list@ List_Head + @ head!
end

fn ListTail { list -- tail }
	list@ List_Tail + @ tail!
end

fn ListNodeOwner { node -- owner }
	node@ ListNode_Owner + @ owner!
end

fn ListNodePrev { node -- prev }
	node@ ListNode_Prev + @ prev!
end

fn ListNodeNext { node -- next }
	node@ ListNode_Next + @ next!
end

fn ListNodeValue { node -- value }
	node@ ListNode_Value + @ value!
end

fn ListDestroy { list -- }
	auto n
	list@ List_Head + @ n!

	while (n@ 0 ~=)
		n@ ListNode_Value + @ Free
		n@ ListNode_Next + @ n!
	end
end

fn ListFree { list -- }
	auto n
	list@ List_Head + @ n!

	while (n@ 0 ~=)
		auto s
		n@ ListNode_Next + @ s!
		n@ Free
		s@ n!
	end
end

fn ListAppend { node list -- }
	0 node@ ListNode_Next + !
	list@ node@ ListNode_Owner + !

	if (list@ List_Length + @ 0 ==)
		node@ list@ List_Head + !
		node@ list@ List_Tail + !
		0 node@ ListNode_Prev + !
		0 node@ ListNode_Next + !
		1 list@ List_Length + !
		return
	end

	node@ list@ List_Tail + @ ListNode_Next + !
	list@ List_Tail + @ node@ ListNode_Prev + !
	node@ list@ List_Tail + !
	1 list@ List_Length + +=
end

fn ListInsert1 { item list -- node }
	ListNode_SIZEOF Malloc node!
	item@ node@ ListNode_Value + !
	0 node@ ListNode_Next + !
	0 node@ ListNode_Prev + !
	0 node@ ListNode_Owner + !
	node@ list@ ListAppend
end

fn ListInsert { item list -- }
	item@ list@ ListInsert1 drop
end

fn ListCreate { -- list }
	List_SIZEOF Malloc list!

	0 list@ List_Head + !
	0 list@ List_Tail + !
	0 list@ List_Length + !
end

fn ListTakeHead { list -- head }
	0 list@ ListRemoveRR head!
end

fn ListRemoveRR { index list -- ref }
	if (index@ list@ List_Length + @ >) ERR ref! return end

	auto n
	list@ List_Head + @ n!

	auto i
	0 i!

	while (i@ index@ <)
		n@ ListNode_Next + @ n!
		1 i +=
	end

	n@ list@ ListDelete

	n@ ref!
end

fn ListRemove { index list -- }
	index@ list@ ListRemoveRR Free
end

fn ListDelete { node list -- }
	if (node@ list@ List_Head + @ ==)
		node@ ListNode_Next + @ list@ List_Head + !
	end
	if (node@ list@ List_Tail + @ ==)
		node@ ListNode_Prev + @ list@ List_Tail + !
	end
	if (node@ ListNode_Prev + @ 0 ~=)
		node@ ListNode_Next + @
		node@ ListNode_Prev + @ ListNode_Next + !
	end
	if (node@ ListNode_Next + @ 0 ~=)
		node@ ListNode_Prev + @
		node@ ListNode_Next + @ ListNode_Prev + !
	end

	0 node@ ListNode_Prev + !
	0 node@ ListNode_Next + !
	0 node@ ListNode_Owner + !

	list@ List_Length + dup @ 1 - swap !
end

fn ListFind { value list -- item }
	auto n
	list@ List_Head + @ n!

	0 item!

	while (n@ 0 ~=)
		if (n@ ListNode_Value + @ value@ ==)
			return
		end

		1 item +=
		n@ ListNode_Next + @ n!
	end

	-1 item!
end