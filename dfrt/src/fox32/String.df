#include "<inc>/const.h"
#include "<inc>/rt.h"

asm "

;a0 - word
;a1 - size
;a2 - ptr
memset:
.global memset
	mov  r31, a1
	srl  r31, 2
	ifz  jmp .skip

.wordloop:
	mov  [a2], a0
	add  a2, 4
	rloop .wordloop

.skip:
	mov  r31, a1
	and  r31, 3
	ifz  jmp .skipbyte

.byteloop:
	mov.8 [a2], a0
	srl  a0, 8
	add  a2, 1
	rloop .byteloop

.skipbyte:
	ret

;a0 - size
;a1 - src
;a2 - dest
memcpy:
.global memcpy
	mov  r31, a0
	srl  r31, 2
	ifz  jmp .skip

.wordloop:
	mov  [a2], [a1]
	add  a2, 4
	add  a1, 4
	rloop .wordloop

.skip:
	mov  r31, a0
	and  r31, 3
	ifz  jmp .skipbyte

.byteloop:
	mov.8 [a2], [a1]
	add  a2, 1
	add  a1, 1
	rloop .byteloop

.skipbyte:
	ret

;a0 - size
;a1 - src
;a2 - dest
memcpybck:
	mov  r31, a0
	srl  r31, 2
	ifz  jmp .skip

	add  a1, a0
	add  a2, a0

.wordloop:
	sub  a2, 4
	sub  a1, 4
	mov  [a2], [a1]
	rloop .wordloop

.skip:
	mov  r31, a0
	and  r31, 3
	ifz  jmp .skipbyte

.byteloop:
	sub  a2, 1
	sub  a1, 1
	mov.8 [a2], [a1]
	rloop .byteloop

.skipbyte:
	ret

"

extern memcpybck { dest src size -- }

fn memmove { dest src size -- }
	if (src@ dest@ <)
		dest@ src@ size@ memcpybck
	end else
		dest@ src@ size@ memcpy
	end
end

fn strcmp { str1 str2 -- eq }
	while (str1@ gb str2@ gb ==)
		if (str1@ gb ~~)
			1 eq!
			return
		end

		1 str1 +=
		1 str2 +=
	end

	0 eq!
end

fn strcpy { dest src -- }
	while (src@ gb 0 ~=)
		src@ gb dest@ sb

		1 dest +=
		1 src +=
	end

	0 dest@ sb
end

fn strncpy { dest src max -- }
	dest@ max@ + max!

	while (src@ gb 0 ~= dest@ max@ < &&)
		src@ gb dest@ sb

		1 dest +=
		1 src +=
	end

	0 dest@ sb
end