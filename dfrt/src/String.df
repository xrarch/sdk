#include "<inc>/const.h"

extern Malloc { sz -- ptr }

fn itoa { n str -- }
	auto i
	0 i!

	while (1)
		n@ 10 % '0' + str@ i@ + sb
		1 i +=
		10 n /=
		if (n@ 0 ==)
			break
		end
	end

	0 str@ i@ + sb
	str@ reverse
end

fn strdup { str -- astr }
	str@ strlen 1 + Malloc astr!

	astr@ str@ strcpy
end

fn reverse { str -- }
	auto i
	auto j
	auto c

	0 i!
	str@ strlen 1 - j!

	while (i@ j@ <)
		str@ i@ + gb c!

		str@ j@ + gb str@ i@ + sb
		c@ str@ j@ + sb

		1 i +=
		1 j -=
	end
end

fn memcpy { dest src sz -- }
	auto canfast
	1 canfast!

	if (dest@ 4 %)
		0 canfast!
	end elseif (src@ 4 %)
		0 canfast!
	end

	auto i
	0 i!

	auto iol

	auto rm

	if (canfast@)
		sz@ 4 / iol!
		sz@ 4 % rm!

		while (i@ iol@ <)
			src@ @ dest@ !

			4 src +=
			4 dest +=
			1 i +=
		end
	end else
		sz@ rm!
	end

	0 i!

	while (i@ rm@ <)
		src@ gb dest@ sb

		1 src +=
		1 dest +=
		1 i +=
	end
end

fn memset { ptr size wot -- }
	while (ptr@ 4 %)
		wot@ ptr@ sb

		1 ptr +=
	end

	auto iol
	size@ 4 / iol!

	auto rm
	size@ 4 % rm!

	auto i
	0 i!

	while (i@ iol@ <)
		wot@ ptr@ !

		4 ptr +=
		1 i +=
	end

	0 i!

	while (i@ rm@ <)
		wot@ ptr@ sb

		1 ptr +=
		1 i +=
	end
end

fn strcmp { str1 str2 -- eq }
	auto i
	0 i!

	while (str1@ i@ + gb str2@ i@ + gb ==)
		if (str1@ i@ + gb 0 ==)
			1 eq!
			return
		end

		1 i +=
	end

	0 eq!
	return
end

fn strlen { str -- size }
	0 size!

	while (str@ gb 0 ~=)
		1 size +=
		1 str +=
	end
end

fn strtok { str buf del -- next }
	auto i
	0 i!

	if (str@ gb 0 ==)
		0 buf@ sb
		0 next!
		return
	end

	while (str@ gb del@ ==)
		1 str +=
	end

	while (str@ i@ + gb del@ ~=)
		auto char
		str@ i@ + gb char!

		char@ buf@ i@ + sb

		if (char@ 0 ==)
			0 next!
			return
		end

		1 i +=
	end

	0 buf@ i@ + sb

	str@ i@ + next!
end

fn strzero { str -- }
	auto i
	0 i!
	while (str@ i@ + gb 0 ~=)
		0 str@ i@ + sb
		
		1 i +=
	end
end

fn strntok { str buf del n -- next }
	auto i
	0 i!

	if (str@ gb 0 ==)
		0 buf@ sb
		0 next!
		return
	end

	while (str@ gb del@ ==)
		1 str +=
	end

	while (str@ i@ + gb del@ ~=)
		auto char
		str@ i@ + gb char!

		if (i@ n@ <)
			char@ buf@ i@ + sb
		end

		if (char@ 0 ==)
			0 next!
			return
		end

		1 i +=
	end

	0 buf@ i@ + sb

	str@ i@ + next!
end

fn strcpy { dest src -- }
	while (src@ gb 0 ~=)
		src@ gb dest@ sb

		1 dest +=
		1 src +=
	end

	0 dest@ sb
end

fn strncpy { dest src max -- }
	dest@ max@ + max!

	while (src@ gb 0 ~= dest@ max@ < &&)
		src@ gb dest@ sb

		1 dest +=
		1 src +=
	end

	0 dest@ sb
end

fn strcat { dest src -- }
	dest@ strlen 1 + dest@ + src@ strcpy
end

fn strncat { dest src max -- }
	auto ds
	dest@ strlen 1 + ds!

	auto md
	max@ ds@ - md!

	ds@ dest@ + src@ md@ strncpy
end

fn atoi10 { str -- res }
	auto i
	0 i!
	0 res!

	while (str@ i@ + gb 0 ~=)
		auto c
		str@ i@ + gb c!

		if (c@ '0' >= c@ '9' <= &&)
			res@ 10 *
			c@ '0' -
			+
			res!
		end else
			0 res! return
		end

		1 i +=
	end
end

fn atoi8 { str -- res }
	auto i
	0 i!
	0 res!

	while (str@ i@ + gb 0 ~=)
		auto c
		str@ i@ + gb c!

		if (c@ '0' >= c@ '7' <= &&)
			res@ 8 *
			c@ '0' -
			+
			res!
		end else
			0 res! return
		end

		1 i +=
	end
end

fn private HexDigitToNum { digit -- num }
	-1 num!

	if (digit@ '0' >= digit@ '9' <= &&)
		digit@ '0' - num!
	end elseif (digit@ 'a' >= digit@ 'f' <= &&)
		digit@ 'a' - 10 + num!
	end elseif (digit@ 'A' >= digit@ 'F' <= &&)
		digit@ 'A' - 10 + num!
	end
end

fn atoi16 { str -- res }
	auto i
	0 i!
	0 res!

	while (str@ i@ + gb 0 ~=)
		auto n
		str@ i@ + gb HexDigitToNum n!

		if (n@ -1 ==)
			0 res!
			return
		end

		res@ 16 * n@ + res!

		1 i +=
	end
end

fn atoi { str -- res }
	auto base
	10 base!

	if (str@ gb 0 ==)
		0 res! return
	end

	auto neg
	0 neg!

	if (str@ gb '-' ==)
		1 neg!

		1 str +=
	end

	if (str@ gb '0' ==)
		8 base!
		1 str +=

		if (str@ gb 'x' ==)
			16 base!
			1 str +=
		end
	end

	if (base@ 10 ==)
		str@ atoi10 res!
	end elseif (base@ 8 ==)
		str@ atoi8 res!
	end elseif (base@ 16 ==)
		str@ atoi16 res!
	end

	if (neg@)
		0 res@ - res!
	end
end