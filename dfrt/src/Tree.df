#include "<inc>/const.h"
#include "<inc>/list.h"
#include "<inc>/tree.h"

extern Calloc { sz -- ptr }
extern Malloc { sz -- ptr }
extern Free { ptr -- }

(* stolen and ported to dragonfruit from toaruos tree.c *)

(* any new fns should be updated in <df>/tree.h *)

fn TreeNodes { tree -- nodes }
	tree@ Tree_Nodes + @ nodes!
end

fn TreeRoot { tree -- root }
	tree@ Tree_Root + @ root!
end

fn TreeNodeValue { node -- value }
	node@ TreeNode_Value + @ value!
end

fn TreeNodeParent { node -- parent }
	node@ TreeNode_Parent + @ parent!
end

fn TreeNodeChildren { node -- children }
	node@ TreeNode_Children + @ children!
end

fn TreeCreate { -- tree }
	Tree_SIZEOF Calloc tree!

	0 tree@ Tree_Nodes + !
	0 tree@ Tree_Root + !
end

fn TreeSetRoot { value tree -- root }
	value@ TreeNodeCreate root!

	root@ tree@ Tree_Root + !
	1 tree@ Tree_Nodes + !
end

fn TreeNodeDestroy { node -- }
	auto n
	node@ TreeNode_Children + @ List_Head + @ n!
	while (n@ 0 ~=)
		n@ ListNode_Value + @ TreeNodeDestroy

		n@ ListNode_Next + @ n!
	end

	node@ TreeNode_Value + @ Free
end

fn TreeDestroy { tree -- }
	if (tree@ Tree_Root + @ 0 ~=)
		tree@ Tree_Root + @ TreeNodeDestroy
	end
end

fn TreeNodeFree { node -- }
	if (node@ 0 ==)
		return
	end

	auto n
	node@ TreeNode_Children + @ List_Head + @ n!
	while (n@ 0 ~=)
		n@ ListNode_Value + @ TreeNodeFree

		n@ ListNode_Next + @ n!
	end

	node@ Free
end

fn TreeFree { tree -- }
	tree@ Tree_Root + @ TreeNodeFree
end

fn TreeNodeCreate { value -- node }
	TreeNode_SIZEOF Calloc node!

	value@ node@ TreeNode_Value + !
	ListCreate node@ TreeNode_Children + !
	0 node@ TreeNode_Parent + !
end

fn TreeInsertChildNode { node parent tree -- }
	node@ parent@ TreeNode_Children + @ ListInsert
	parent@ node@ TreeNode_Parent + !
	1 tree@ Tree_Nodes + +=
end

fn TreeInsertChild { value parent tree -- node }
	value@ TreeNodeCreate node!
	node@ parent@ tree@ TreeInsertChildNode
end

fn TreeNodeGetValue { node -- value }
	node@ TreeNode_Value + @ value!
end